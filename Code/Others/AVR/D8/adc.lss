
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000384  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000658  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ef       	ldi	r30, 0xFC	; 252
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2f d0       	rcall	.+94     	; 0xb8 <main>
  5a:	4e c0       	rjmp	.+156    	; 0xf8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_14>:
#include <avr\io.h>              // Most basic include files
#include <avr\interrupt.h>       // Add the necessary ones
#include <avr\signal.h>          // here

ISR(ADC_vect)
{	PORTD=ADCL;
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	af 93       	push	r26
  6c:	bf 93       	push	r27
  6e:	ef 93       	push	r30
  70:	ff 93       	push	r31
  72:	df 93       	push	r29
  74:	cf 93       	push	r28
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	a2 e3       	ldi	r26, 0x32	; 50
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e4 e2       	ldi	r30, 0x24	; 36
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	8c 93       	st	X, r24
	PORTB=ADCH;
  86:	a8 e3       	ldi	r26, 0x38	; 56
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	e5 e2       	ldi	r30, 0x25	; 37
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADSC);
  92:	a6 e2       	ldi	r26, 0x26	; 38
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e6 e2       	ldi	r30, 0x26	; 38
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8c 93       	st	X, r24
}
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	ff 91       	pop	r31
  a6:	ef 91       	pop	r30
  a8:	bf 91       	pop	r27
  aa:	af 91       	pop	r26
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <main>:

// ***********************************************************
// Main program
//
int main(void)
 {
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
   DDRB=0XFF;
  c0:	e7 e3       	ldi	r30, 0x37	; 55
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	80 83       	st	Z, r24
   DDRD=0XFF;
  c8:	e1 e3       	ldi	r30, 0x31	; 49
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	80 83       	st	Z, r24
   DDRC=0X00;
  d0:	e4 e3       	ldi	r30, 0x34	; 52
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
   sei();
  d6:	78 94       	sei
   ADCSRA=0X8F;
  d8:	e6 e2       	ldi	r30, 0x26	; 38
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	8f e8       	ldi	r24, 0x8F	; 143
  de:	80 83       	st	Z, r24
   ADMUX=0XC0;
  e0:	e7 e2       	ldi	r30, 0x27	; 39
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	80 83       	st	Z, r24
   ADCSRA|=(1<<ADSC);
  e8:	a6 e2       	ldi	r26, 0x26	; 38
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e6 e2       	ldi	r30, 0x26	; 38
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	8c 93       	st	X, r24
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x3e>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
