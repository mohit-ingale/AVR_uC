
spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000e0  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  000000e2  00000156  2**0
                  ALLOC
  3 .stab         00000384  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000066d  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ee       	ldi	r30, 0xE0	; 224
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	16 d0       	rcall	.+44     	; 0x86 <main>
  5a:	40 c0       	rjmp	.+128    	; 0xdc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <__vector_10>:
#include <avr\interrupt.h>       // Add the necessary ones
#include <avr\signal.h>          // here
int i=6,FLAG;

ISR(SPI_STC_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	df 93       	push	r29
  6a:	cf 93       	push	r28
  6c:	cd b7       	in	r28, 0x3d	; 61
  6e:	de b7       	in	r29, 0x3e	; 62
	
	FLAG=0;
  70:	10 92 63 00 	sts	0x0063, r1
  74:	10 92 62 00 	sts	0x0062, r1
}
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <main>:

int main(void)
{
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	DDRB=(1<<PB3)|(1<<PB5);
  8e:	e7 e3       	ldi	r30, 0x37	; 55
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	88 e2       	ldi	r24, 0x28	; 40
  94:	80 83       	st	Z, r24
	PORTB|=(1<<PB4);
  96:	a8 e3       	ldi	r26, 0x38	; 56
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e8 e3       	ldi	r30, 0x38	; 56
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	8c 93       	st	X, r24
	SPCR|=(1<<SPIE)|(1<<SPE)|(1<<MSTR);
  a4:	ad e2       	ldi	r26, 0x2D	; 45
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	ed e2       	ldi	r30, 0x2D	; 45
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 6d       	ori	r24, 0xD0	; 208
  b0:	8c 93       	st	X, r24
   sei();
  b2:	78 94       	sei
   while(1)
   {
   	FLAG=1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	90 93 63 00 	sts	0x0063, r25
  bc:	80 93 62 00 	sts	0x0062, r24
   	SPDR=i;
  c0:	ef e2       	ldi	r30, 0x2F	; 47
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 91 60 00 	lds	r24, 0x0060
  c8:	90 91 61 00 	lds	r25, 0x0061
  cc:	80 83       	st	Z, r24
   	while(FLAG);
  ce:	80 91 62 00 	lds	r24, 0x0062
  d2:	90 91 63 00 	lds	r25, 0x0063
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	d1 f7       	brne	.-12     	; 0xce <main+0x48>
  da:	ec cf       	rjmp	.-40     	; 0xb4 <main+0x2e>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
