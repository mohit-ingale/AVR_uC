
spi_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000330  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000005f3  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	24 c0       	rjmp	.+72     	; 0x6c <__vector_17>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ee       	ldi	r30, 0xE2	; 226
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	22 d0       	rcall	.+68     	; 0xac <main>
  68:	3a c0       	rjmp	.+116    	; 0xde <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <__vector_17>:
#include <avr\io.h>              // Most basic include files
#include <avr\interrupt.h>       // Add the necessary ones
#include <avr\signal.h>          // here

ISR(SPI_STC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	af 93       	push	r26
  7a:	bf 93       	push	r27
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	PORTD=SPDR;
  88:	eb e2       	ldi	r30, 0x2B	; 43
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	8c 91       	ld	r24, X
  92:	80 83       	st	Z, r24
//	SPDR=7;
}
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	ff 91       	pop	r31
  9a:	ef 91       	pop	r30
  9c:	bf 91       	pop	r27
  9e:	af 91       	pop	r26
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <main>:

int main(void)
{
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
	DDRD=0xFF;
  b4:	ea e2       	ldi	r30, 0x2A	; 42
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	80 83       	st	Z, r24
	DDRB=(1<<PB4);
  bc:	e4 e2       	ldi	r30, 0x24	; 36
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	80 83       	st	Z, r24
//	PORTB&=~(1<<PB2);
	//PORTB|=(1<<PB3)|(1<<PB5);
	SPCR|=(1<<SPIE)|(1<<SPE);
  c4:	ac e4       	ldi	r26, 0x4C	; 76
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	ec e4       	ldi	r30, 0x4C	; 76
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 6c       	ori	r24, 0xC0	; 192
  d0:	8c 93       	st	X, r24
	SPDR=7;
  d2:	ee e4       	ldi	r30, 0x4E	; 78
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	80 83       	st	Z, r24
	sei();
  da:	78 94       	sei
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x30>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
