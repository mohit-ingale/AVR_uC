
xtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000426  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000012  00800100  00000426  0000049a  2**0
                  ALLOC
  2 .stab         00000930  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000986  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_14>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000068 <bit_mask>:
  68:	01 02 04 08 10 20 40 80                             ..... @.

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e2       	ldi	r30, 0x26	; 38
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 31       	cpi	r26, 0x12	; 18
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ae <main>:
volatile char tick_flag = 0;    /* if non-zero, a tick has elapsed */
unsigned int task_timers[NUM_TASKS]={0,0,0,0,0,0,0,0};                  /* init the timers to 0 on startup */
static const PROGMEM char bit_mask[]={1,2,4,8,16,32,64,128};            /* value -> bit mask xlate table */

int main(void)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62

  init_devices();
  b6:	0e 94 c4 01 	call	0x388	; 0x388 <init_devices>
//
//	start at least one task here
//
set_task(7);	//task7 runs
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	0e 94 18 01 	call	0x230	; 0x230 <set_task>
set_task(6);	//task6 runs
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	0e 94 18 01 	call	0x230	; 0x230 <set_task>

//      main loop

  while(1)
    {
    if (tick_flag)
  c6:	80 91 01 01 	lds	r24, 0x0101
  ca:	88 23       	and	r24, r24
  cc:	e1 f3       	breq	.-8      	; 0xc6 <main+0x18>
      {
      tick_flag = 0;
  ce:	10 92 01 01 	sts	0x0101, r1
	  task_dispatch();              // well....
  d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <task_dispatch>
  d6:	f7 cf       	rjmp	.-18     	; 0xc6 <main+0x18>

000000d8 <task_dispatch>:
}
//
//	a task gets dispatched on every tick_flag tick (10ms)
//
void task_dispatch(void)
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	00 d0       	rcall	.+0      	; 0xde <task_dispatch+0x6>
  de:	00 d0       	rcall	.+0      	; 0xe0 <task_dispatch+0x8>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <task_dispatch+0xa>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	

/* take care of the task timers. if the value ==0 skip it
	else decrement it. If it decrements to zero, activate the task associated with it */

  task=0;
  e6:	1c 82       	std	Y+4, r1	; 0x04
  e8:	34 c0       	rjmp	.+104    	; 0x152 <task_dispatch+0x7a>
  while (task < NUM_TASKS )
    {
    if (task_timers[task])
  ea:	8c 81       	ldd	r24, Y+4	; 0x04
  ec:	88 2f       	mov	r24, r24
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	fc 01       	movw	r30, r24
  f6:	ee 5f       	subi	r30, 0xFE	; 254
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	80 81       	ld	r24, Z
  fc:	91 81       	ldd	r25, Z+1	; 0x01
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	29 f1       	breq	.+74     	; 0x14c <task_dispatch+0x74>
	   {
  	   task_timers[task]--;            /* dec the timer */
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	c9 01       	movw	r24, r18
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	fc 01       	movw	r30, r24
 110:	ee 5f       	subi	r30, 0xFE	; 254
 112:	fe 4f       	sbci	r31, 0xFE	; 254
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	ac 01       	movw	r20, r24
 11a:	41 50       	subi	r20, 0x01	; 1
 11c:	50 40       	sbci	r21, 0x00	; 0
 11e:	c9 01       	movw	r24, r18
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	fc 01       	movw	r30, r24
 126:	ee 5f       	subi	r30, 0xFE	; 254
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	51 83       	std	Z+1, r21	; 0x01
 12c:	40 83       	st	Z, r20
	   if (task_timers[task] == 0 )
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	fc 01       	movw	r30, r24
 13a:	ee 5f       	subi	r30, 0xFE	; 254
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	80 81       	ld	r24, Z
 140:	91 81       	ldd	r25, Z+1	; 0x01
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	19 f4       	brne	.+6      	; 0x14c <task_dispatch+0x74>
	   		{
	    	set_task(task); /* if ==0 activate the task bit */
 146:	8c 81       	ldd	r24, Y+4	; 0x04
 148:	0e 94 18 01 	call	0x230	; 0x230 <set_task>
			}
	   }
    task++;
 14c:	8c 81       	ldd	r24, Y+4	; 0x04
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	8c 83       	std	Y+4, r24	; 0x04

/* take care of the task timers. if the value ==0 skip it
	else decrement it. If it decrements to zero, activate the task associated with it */

  task=0;
  while (task < NUM_TASKS )
 152:	8c 81       	ldd	r24, Y+4	; 0x04
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	48 f2       	brcs	.-110    	; 0xea <task_dispatch+0x12>
			}
	   }
    task++;
    }

  task = 0; /* start at the most significant task */
 158:	1c 82       	std	Y+4, r1	; 0x04
 15a:	14 c0       	rjmp	.+40     	; 0x184 <task_dispatch+0xac>
  while (task <= NUM_TASKS )
    {
	  if ((task_bits & pgm_read_byte(&bit_mask[task])))
 15c:	8c 81       	ldd	r24, Y+4	; 0x04
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	88 59       	subi	r24, 0x98	; 152
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	9b 83       	std	Y+3, r25	; 0x03
 168:	8a 83       	std	Y+2, r24	; 0x02
 16a:	ea 81       	ldd	r30, Y+2	; 0x02
 16c:	fb 81       	ldd	r31, Y+3	; 0x03
 16e:	84 91       	lpm	r24, Z+
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	99 81       	ldd	r25, Y+1	; 0x01
 174:	80 91 00 01 	lds	r24, 0x0100
 178:	89 23       	and	r24, r25
 17a:	88 23       	and	r24, r24
 17c:	31 f4       	brne	.+12     	; 0x18a <task_dispatch+0xb2>
	  		{
	  		break; /* if activate task found..*/
			}
      task++;         /* else try the next one */
 17e:	8c 81       	ldd	r24, Y+4	; 0x04
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	8c 83       	std	Y+4, r24	; 0x04
	   }
    task++;
    }

  task = 0; /* start at the most significant task */
  while (task <= NUM_TASKS )
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	89 30       	cpi	r24, 0x09	; 9
 188:	48 f3       	brcs	.-46     	; 0x15c <task_dispatch+0x84>
	  		{
	  		break; /* if activate task found..*/
			}
      task++;         /* else try the next one */
    }
  switch(task)            /* if task bit is active..execute the task */
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	3e 83       	std	Y+6, r19	; 0x06
 192:	2d 83       	std	Y+5, r18	; 0x05
 194:	8d 81       	ldd	r24, Y+5	; 0x05
 196:	9e 81       	ldd	r25, Y+6	; 0x06
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	91 05       	cpc	r25, r1
 19c:	91 f1       	breq	.+100    	; 0x202 <task_dispatch+0x12a>
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	24 30       	cpi	r18, 0x04	; 4
 1a4:	31 05       	cpc	r19, r1
 1a6:	7c f4       	brge	.+30     	; 0x1c6 <task_dispatch+0xee>
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	11 f1       	breq	.+68     	; 0x1f6 <task_dispatch+0x11e>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	04 f5       	brge	.+64     	; 0x1fc <task_dispatch+0x124>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	b1 f0       	breq	.+44     	; 0x1f0 <task_dispatch+0x118>
 1c4:	2c c0       	rjmp	.+88     	; 0x21e <task_dispatch+0x146>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	25 30       	cpi	r18, 0x05	; 5
 1cc:	31 05       	cpc	r19, r1
 1ce:	f9 f0       	breq	.+62     	; 0x20e <task_dispatch+0x136>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	85 30       	cpi	r24, 0x05	; 5
 1d6:	91 05       	cpc	r25, r1
 1d8:	bc f0       	brlt	.+46     	; 0x208 <task_dispatch+0x130>
 1da:	2d 81       	ldd	r18, Y+5	; 0x05
 1dc:	3e 81       	ldd	r19, Y+6	; 0x06
 1de:	26 30       	cpi	r18, 0x06	; 6
 1e0:	31 05       	cpc	r19, r1
 1e2:	c1 f0       	breq	.+48     	; 0x214 <task_dispatch+0x13c>
 1e4:	8d 81       	ldd	r24, Y+5	; 0x05
 1e6:	9e 81       	ldd	r25, Y+6	; 0x06
 1e8:	87 30       	cpi	r24, 0x07	; 7
 1ea:	91 05       	cpc	r25, r1
 1ec:	b1 f0       	breq	.+44     	; 0x21a <task_dispatch+0x142>
 1ee:	17 c0       	rjmp	.+46     	; 0x21e <task_dispatch+0x146>
    {
    case 0:
      task0();
 1f0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <task0>
 1f4:	14 c0       	rjmp	.+40     	; 0x21e <task_dispatch+0x146>
      break;
    case 1:
      task1();
 1f6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <task1>
 1fa:	11 c0       	rjmp	.+34     	; 0x21e <task_dispatch+0x146>
      break;
    case 2:
      task2();
 1fc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <task2>
 200:	0e c0       	rjmp	.+28     	; 0x21e <task_dispatch+0x146>
      break;
    case 3:
      task3();
 202:	0e 94 76 01 	call	0x2ec	; 0x2ec <task3>
 206:	0b c0       	rjmp	.+22     	; 0x21e <task_dispatch+0x146>
      break;
    case 4:
      task4();
 208:	0e 94 80 01 	call	0x300	; 0x300 <task4>
 20c:	08 c0       	rjmp	.+16     	; 0x21e <task_dispatch+0x146>
      break;
    case 5:
      task5();
 20e:	0e 94 8a 01 	call	0x314	; 0x314 <task5>
 212:	05 c0       	rjmp	.+10     	; 0x21e <task_dispatch+0x146>
      break;
    case 6:
      task6();
 214:	0e 94 94 01 	call	0x328	; 0x328 <task6>
 218:	02 c0       	rjmp	.+4      	; 0x21e <task_dispatch+0x146>
      break;
    case 7:
      task7();
 21a:	0e 94 ac 01 	call	0x358	; 0x358 <task7>
      break;
    default:
      break;                  /* no task was active!! */
    }
}
 21e:	26 96       	adiw	r28, 0x06	; 6
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	cf 91       	pop	r28
 22c:	df 91       	pop	r29
 22e:	08 95       	ret

00000230 <set_task>:

// enable a task for execution
void set_task(char tsk)
{
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	00 d0       	rcall	.+0      	; 0x236 <set_task+0x6>
 236:	00 d0       	rcall	.+0      	; 0x238 <set_task+0x8>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	8c 83       	std	Y+4, r24	; 0x04
  task_bits |= pgm_read_byte(&bit_mask[tsk]);       /* sets a task bit */
 23e:	8c 81       	ldd	r24, Y+4	; 0x04
 240:	88 2f       	mov	r24, r24
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	88 59       	subi	r24, 0x98	; 152
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	9b 83       	std	Y+3, r25	; 0x03
 24a:	8a 83       	std	Y+2, r24	; 0x02
 24c:	ea 81       	ldd	r30, Y+2	; 0x02
 24e:	fb 81       	ldd	r31, Y+3	; 0x03
 250:	84 91       	lpm	r24, Z+
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	99 81       	ldd	r25, Y+1	; 0x01
 256:	80 91 00 01 	lds	r24, 0x0100
 25a:	89 2b       	or	r24, r25
 25c:	80 93 00 01 	sts	0x0100, r24
}
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	cf 91       	pop	r28
 26a:	df 91       	pop	r29
 26c:	08 95       	ret

0000026e <reset_task>:
// disable a task from executing
void reset_task(char tsk)
{
 26e:	df 93       	push	r29
 270:	cf 93       	push	r28
 272:	00 d0       	rcall	.+0      	; 0x274 <reset_task+0x6>
 274:	00 d0       	rcall	.+0      	; 0x276 <reset_task+0x8>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	8c 83       	std	Y+4, r24	; 0x04
  task_bits &= (~pgm_read_byte(&bit_mask[tsk]));  /* resets a task bit */
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	88 2f       	mov	r24, r24
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	88 59       	subi	r24, 0x98	; 152
 284:	9f 4f       	sbci	r25, 0xFF	; 255
 286:	9b 83       	std	Y+3, r25	; 0x03
 288:	8a 83       	std	Y+2, r24	; 0x02
 28a:	ea 81       	ldd	r30, Y+2	; 0x02
 28c:	fb 81       	ldd	r31, Y+3	; 0x03
 28e:	84 91       	lpm	r24, Z+
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	98 2f       	mov	r25, r24
 296:	90 95       	com	r25
 298:	80 91 00 01 	lds	r24, 0x0100
 29c:	89 23       	and	r24, r25
 29e:	80 93 00 01 	sts	0x0100, r24
}
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	cf 91       	pop	r28
 2ac:	df 91       	pop	r29
 2ae:	08 95       	ret

000002b0 <task0>:

void task0(void)
{
 2b0:	df 93       	push	r29
 2b2:	cf 93       	push	r28
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
  reset_task(0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 37 01 	call	0x26e	; 0x26e <reset_task>
}
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	08 95       	ret

000002c4 <task1>:
void task1(void)
{
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
  reset_task(1);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 37 01 	call	0x26e	; 0x26e <reset_task>
}
 2d2:	cf 91       	pop	r28
 2d4:	df 91       	pop	r29
 2d6:	08 95       	ret

000002d8 <task2>:
void task2(void)
{
 2d8:	df 93       	push	r29
 2da:	cf 93       	push	r28
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
  reset_task(2);
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 37 01 	call	0x26e	; 0x26e <reset_task>
}
 2e6:	cf 91       	pop	r28
 2e8:	df 91       	pop	r29
 2ea:	08 95       	ret

000002ec <task3>:
void task3(void)
{
 2ec:	df 93       	push	r29
 2ee:	cf 93       	push	r28
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
  reset_task(3);
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	0e 94 37 01 	call	0x26e	; 0x26e <reset_task>
}
 2fa:	cf 91       	pop	r28
 2fc:	df 91       	pop	r29
 2fe:	08 95       	ret

00000300 <task4>:
void task4(void)
{
 300:	df 93       	push	r29
 302:	cf 93       	push	r28
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
  reset_task(4);
 308:	84 e0       	ldi	r24, 0x04	; 4
 30a:	0e 94 37 01 	call	0x26e	; 0x26e <reset_task>
}
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	08 95       	ret

00000314 <task5>:
void task5(void)
{
 314:	df 93       	push	r29
 316:	cf 93       	push	r28
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
  reset_task(5);
 31c:	85 e0       	ldi	r24, 0x05	; 5
 31e:	0e 94 37 01 	call	0x26e	; 0x26e <reset_task>
}
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	08 95       	ret

00000328 <task6>:
//
//	flash PORTB.4 at 2hz
//
void task6(void)
{
 328:	df 93       	push	r29
 32a:	cf 93       	push	r28
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
PORTB ^= (1<<4);
 330:	a5 e2       	ldi	r26, 0x25	; 37
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	e5 e2       	ldi	r30, 0x25	; 37
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	90 81       	ld	r25, Z
 33a:	80 e1       	ldi	r24, 0x10	; 16
 33c:	89 27       	eor	r24, r25
 33e:	8c 93       	st	X, r24
task_timers[6] = 25;		//every 250ms
 340:	89 e1       	ldi	r24, 0x19	; 25
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 0f 01 	sts	0x010F, r25
 348:	80 93 0e 01 	sts	0x010E, r24
reset_task(6);
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	0e 94 37 01 	call	0x26e	; 0x26e <reset_task>
}
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	08 95       	ret

00000358 <task7>:
//
//	flash PORTB.5 at 1hz
//
void task7(void)
{
 358:	df 93       	push	r29
 35a:	cf 93       	push	r28
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
PORTB ^= (1<<5);
 360:	a5 e2       	ldi	r26, 0x25	; 37
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e5 e2       	ldi	r30, 0x25	; 37
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	90 81       	ld	r25, Z
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	89 27       	eor	r24, r25
 36e:	8c 93       	st	X, r24
task_timers[7] = 50;		//every 500ms
 370:	82 e3       	ldi	r24, 0x32	; 50
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	90 93 11 01 	sts	0x0111, r25
 378:	80 93 10 01 	sts	0x0110, r24
reset_task(7);
 37c:	87 e0       	ldi	r24, 0x07	; 7
 37e:	0e 94 37 01 	call	0x26e	; 0x26e <reset_task>
}
 382:	cf 91       	pop	r28
 384:	df 91       	pop	r29
 386:	08 95       	ret

00000388 <init_devices>:
//call this routine to initialize all peripherals
void init_devices(void)
{
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 390:	f8 94       	cli


 DDRB = 0x30;	//port 4 & 5 as outputs
 392:	e4 e2       	ldi	r30, 0x24	; 36
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 e3       	ldi	r24, 0x30	; 48
 398:	80 83       	st	Z, r24

 timer0_init();
 39a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <timer0_init>

 MCUCR = 0x00;
 39e:	e5 e5       	ldi	r30, 0x55	; 85
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 3a4:	e9 e6       	ldi	r30, 0x69	; 105
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	10 82       	st	Z, r1
 EIMSK = 0x00;
 3aa:	ed e3       	ldi	r30, 0x3D	; 61
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	10 82       	st	Z, r1

 TIMSK0 = 0x02; //timer 0 interrupt sources
 3b0:	ee e6       	ldi	r30, 0x6E	; 110
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	80 83       	st	Z, r24

 PRR = 0x00; //power controller
 3b8:	e4 e6       	ldi	r30, 0x64	; 100
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	10 82       	st	Z, r1
 sei(); //re-enable interrupts
 3be:	78 94       	sei
 //all peripherals are now initialized
}
 3c0:	cf 91       	pop	r28
 3c2:	df 91       	pop	r29
 3c4:	08 95       	ret

000003c6 <timer0_init>:
//TIMER0 initialize - prescale:1024
// WGM: CTC
// desired value: 10mSec
// actual value: 10.048mSec (-0.5%)
void timer0_init(void)
{
 3c6:	df 93       	push	r29
 3c8:	cf 93       	push	r28
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 TCCR0B = 0x00; //stop
 3ce:	e5 e4       	ldi	r30, 0x45	; 69
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	10 82       	st	Z, r1
 TCNT0 = 0x00; //set count
 3d4:	e6 e4       	ldi	r30, 0x46	; 70
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	10 82       	st	Z, r1
 TCCR0A = 0x02;	//CTC mode
 3da:	e4 e4       	ldi	r30, 0x44	; 68
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	80 83       	st	Z, r24
 OCR0A = 0x9C;
 3e2:	e7 e4       	ldi	r30, 0x47	; 71
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	8c e9       	ldi	r24, 0x9C	; 156
 3e8:	80 83       	st	Z, r24
 TCCR0B = 0x05; //start timer
 3ea:	e5 e4       	ldi	r30, 0x45	; 69
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	80 83       	st	Z, r24
}
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	8f 93       	push	r24
 404:	df 93       	push	r29
 406:	cf 93       	push	r28
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 //TIMER0 has overflowed
 	tick_flag = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 93 01 01 	sts	0x0101, r24
}
 412:	cf 91       	pop	r28
 414:	df 91       	pop	r29
 416:	8f 91       	pop	r24
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
