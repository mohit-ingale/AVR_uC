
AVRASM ver. 1.74  kernel.asm Sun Oct 16 11:54:25 2016


          .include "C:\VMLAB\include\m8def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"m8def.inc"
         ;* Title				:Register/Bit Definitions for the ATmega8
         ;* Date                 :07.09.2001
         ;* Version              :1.00
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax			:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.no
         ;* Target MCU			:ATmega8
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device ATmega8
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GICR	=$3b		; new name for GIMSK
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	SPMCR	=$37
          .equ    I2CR    =$36
          .equ    TWCR    =$36
          .equ    MCUCR   =$35
          .equ    MCUSR   =$34		; For compatibility, 
          .equ    MCUCSR  =$34		; keep both names until further
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ    OSCCAL  =$31
          .equ    SFIOR   =$30
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ    UBRRH   =$20		;  Note! UCSRC equals UBRRH
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR	=$0c
          .equ	UCSRA	=$0b
          .equ	UCSRB	=$0a
          .equ	UCSRC	=$20		;  Note! UCSRC equals UBRRH
          .equ	UBRRL	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
          .equ    I2DR    =$03
          .equ    I2AR    =$02
          .equ    I2SR    =$01
          .equ    I2BR    =$00
          .equ    TWDR    =$03
          .equ    TWAR    =$02
          .equ    TWSR    =$01
          .equ    TWBR    =$00
         
         
         
         ;***** Bit Definitions
         ;GICR  (former GIMSK)
          .equ	INT1	=7
          .equ	INT0	=6
          .equ	IVSEL	=1		; interrupt vector select
          .equ	IVCE	=0		; interrupt vector change enable
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ    TOIE0   =0
          .equ    TOIE1   =2
          .equ    OCIE1B  =3
          .equ    OCIE1A  =4
          .equ    TICIE1  =5
          .equ    TOIE2   =6
          .equ    OCIE2   =7
         
         ;TIFR
          .equ    TOV0    =0
          .equ    TOV1    =2
          .equ    OCF1B   =3
          .equ    OCF1A   =4
          .equ    ICF1    =5
          .equ    TOV2    =6
          .equ    OCF2    =7
         
         ;SPMCR
          .equ	SPMIE	=7
          .equ	RWWSB	=6
          .equ	RWWSRE	=4
          .equ	BLBSET	=3
          .equ	PGWRT	=2
          .equ	PGERS	=1
          .equ	SPMEN	=0
         
         ;MCUCR
          .equ    SE      =7
          .equ    SM2     =6
          .equ    SM1     =5
          .equ    SM0     =4
          .equ    ISC11   =3
          .equ    ISC10   =2
          .equ    ISC01   =1
          .equ    ISC00   =0
         
         ;MCUCSR
          .equ    WDRF    =3
          .equ    BORF    =2
          .equ    EXTRF   =1
          .equ    PORF    =0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	FOC1A	=3
          .equ	FOC1B	=2
          .equ	PWM11	=1	; OBSOLETE! Use WGM11
          .equ	PWM10	=0	; OBSOLETE! Use WGM10
          .equ	WGM11	=1
          .equ	WGM10	=0
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC11	=4	; OBSOLETE! Use WGM13
          .equ	CTC10	=3	; OBSOLETE! Use WGM12
          .equ	WGM13	=4
          .equ	WGM12	=3	
          .equ	CTC1	=3		; Obsolete - Included for backward compatibility
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	FOC2	=7
          .equ    PWM2    =6	; OBSOLETE! Use WGM20
          .equ	WGM20	=6	
          .equ    COM21   =5
          .equ    COM20   =4
          .equ    CTC2    =3	; OBSOLETE! Use WGM21
          .equ	WGM21	=3	
          .equ    CS22    =2
          .equ    CS21    =1
          .equ    CS20    =0
         
         ;SFIOR
          .equ    ADHSM   =4
          .equ    ACME    =3
          .equ    PUD     =2
          .equ	PSR2	=1
          .equ	PSR10	=0
         
         ;WDTCR
          .equ	WDCE	=4
          .equ	WDTOE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ    EERIE   =3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTB
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
         ;DDRC
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;UCSRA
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3		; old name kept for compatibilty
          .equ	DOR	=3
          .equ	UPE	=2
          .equ	PE	=2
          .equ	U2X	=1
          .equ	MPCM	=0
         
         ;UCSRB
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2		; old name kept for compatibilty
          .equ	UCSZ2	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;UCSRC
          .equ	URSEL	=7
          .equ	UMSEL	=6
          .equ	UPM1	=5
          .equ	UPM0	=4
          .equ	USBS	=3
          .equ	UCSZ1	=2
          .equ	UCSZ0	=1
          .equ	UCPOL	=0
         		
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
          .equ	SPI2X	=0
         
         ;ACSR
          .equ	ACD	=7
          .equ    ACBG    =6
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ    REFS1   =7
          .equ    REFS0   =6
          .equ    ADLAR   =5
          .equ    MUX3    =3
          .equ    MUX2    =2
          .equ    MUX1    =1
          .equ    MUX0    =0
         
         ;ADCSR
          .equ    ADEN    =7
          .equ    ADSC    =6
          .equ    ADFR    =5
          .equ    ADIF    =4
          .equ    ADIE    =3
          .equ    ADPS2   =2
          .equ    ADPS1   =1
          .equ    ADPS0   =0
         
         ; TWCR
          .equ    TWINT   =7
          .equ    TWEA    =6
          .equ    TWSTA   =5
          .equ    TWSTO   =4
          .equ    TWWC    =3
          .equ    TWEN    =2
         
          .equ    TWIE    =0
         
         ; TWAR
          .equ    TWA6    =7
          .equ    TWA5    =6
          .equ    TWA4    =5
          .equ    TWA3    =4
          .equ    TWA2    =3
          .equ    TWA1    =2
          .equ    TWA0    =1
          .equ    TWGCE   =0
         
         ; TWSR
          .equ    TWS7    =7
          .equ    TWS6    =6
          .equ    TWS5    =5
          .equ    TWS4    =4
          .equ    TWS3    =3
          .equ	TWPS1	=1
          .equ	TWPS0	=0
         
         ;ASSR
          .equ    AS2     =3
          .equ    TCN2UB  =2
          .equ    OCR2UB  =1
          .equ    TCR2UB  =0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	RAMEND =$45F
          .equ	FLASHEND =$FFF
         
         						;  byte groups
         						;  /\/--\/--\/--\ 
          .equ 	SMALLBOOTSTART	=0b00111110000000  ;($0F80) smallest boot block is 256
          .equ 	SECONDBOOTSTART	=0b00111100000000  ;($0F00) 2'nd boot block size is 512
          .equ 	THIRDBOOTSTART	=0b00111000000000  ;($0E00) third boot block size is 1K
          .equ 	LARGEBOOTSTART	=0b00110000000000  ;($0C00) largest boot block is 2K
          .equ 	BOOTSTART		=THIRDBOOTSTART  ;OBSOLETE!!! kept for compatibility
          .equ	PAGESIZE		=32     ;number of WORDS in a page
         
          .equ	INT0addr=$001	; External Interrupt0 Vector Address
          .equ	INT1addr=$002	; External Interrupt1 Vector Address
          .equ	OC2addr =$003	; Output Compare2 Interrupt Vector Address
          .equ	OVF2addr=$004	; Overflow2 Interrupt Vector Address
          .equ	ICP1addr=$005	; Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$006	; Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$007	; Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$008	; Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	; Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00a	; SPI Interrupt Vector Address
          .equ	URXCaddr=$00b	; USART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00c	; USART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00d	; USART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00e	; ADC Interrupt Vector Address
          .equ	ERDYaddr=$00f	; EEPROM Interrupt Vector Address
          .equ	ACIaddr =$010	; Analog Comparator Interrupt Vector Address
          .equ    TWIaddr =$011   ; Irq. vector address for Two-Wire Interface
          .equ	SPMaddr =$012	; SPM complete Interrupt Vector Address
          .equ	SPMRaddr =$012	; SPM complete Interrupt Vector Address
         
         ;declaring initial stack pointer for each task and total no of task
          .EQU    TASKNO=3	;total no of task
          .EQU    CURRENTTASKNO=(RAMEND)	;CURRENTTASKNO to know which is current task
          .EQU    STACK_BACKUP=(RAMEND-2)   ;to backup stack pointer
          .EQU    TASK1_STACK=(RAMEND-100)   ;stack pointer for task1
          .EQU    TASK2_STACK=(RAMEND-400)  ;stack pointer for task2
          .EQU    TASK3_STACK=(RAMEND-700)  ;stack pointer for task3
         
         
          .CSEG
          .ORG 0x0000                            ;reset vector
000000 c012          rjmp start                    ;jump to start code
000001 9518      	reti      ; Addr $01
000002 9518         reti      ; Addr $02
000003 9518         reti      ; Addr $03
000004 9518         reti      ; Addr $04
000005 9518         reti      ; Addr $05
000006 9518         reti      ; Addr $06        Use 'rjmp myVector'
000007 9518         reti      ; Addr $07        to define a interrupt vector
000008 c059         rjmp ISRTIMER      ; Addr $08
000009 9518         reti      ; Addr $09
00000a 9518         reti      ; Addr $0A
00000b 9518      reti   ; Addr $0B        This is just an example
00000c 9518        reti     ; Addr $0C        Not all MCUs have the same
00000d 9518        reti      ; Addr $0D        number of interrupt vectors
00000e 9518         reti      ; Addr $0E
00000f 9518         reti      ; Addr $0F
000010 9518         reti      ; Addr $10
000011 9518         reti
000012 9518         reti
         
         ;
          start:
         ;init timer 1 for regular time intervals e.g sys tick timer
000013 e001          LDI R16,(1<<CS10)
000014 bd0e        OUT TCCR1B,R16
000015 2700        CLR R16
000016 e004        LDI R16,1<<TOIE1
000017 bf09        OUT TIMSK,R16
000018 e000        LDI R16,0X00
000019 bd0d      	  OUT TCNT1H,R16
00001a e000      	  LDI R16,0X00
00001b bd0c      	  OUT TCNT1L,R16
         
         
         ;init all stacks
00001c e0f4          ldi r31,HIGH(STACK_BACKUP)
00001d e5ed          ldi r30,LOW(STACK_BACKUP)
         
00001e e003          ldi r16, HIGH(TASK1_STACK)
00001f 8300          st z, r16
000020 bf0e          out SPH, r16
000021 ef0b          ldi r16, LOW(TASK1_STACK)
000022 9302          st -z, r16
000023 bf0d          out SPL, r16
         
         
         
000024 e002          ldi r16, HIGH(TASK2_STACK-35)
000025 9302          st -z, r16
000026 ea0c          ldi r16, LOW(TASK2_STACK-35)
000027 9302          st -z, r16
         
         
         
000028 e001          ldi r16, HIGH(TASK3_STACK-35)
000029 9302          st -z, r16
00002a e800          ldi r16, LOW(TASK3_STACK-35)
00002b 9302          st -z, r16
         
         
00002c 2700          clr r16
00002d 9300 045f     sts CURRENTTASKNO, r16
         
         ;pc init
         ;why to put address of next task on stack
         ;because in avr when isr is executed only pc is pushed to stack
         ;and on return only pc i popped
         ;we dont do for task one beause we start executing from task 1
00002f e404          ldi r16, LOW(TASK2)
000030 9300 02cf     sts TASK2_STACK, r16
000032 e000          ldi r16, HIGH(TASK2)
000033 9300 02ce     sts TASK2_STACK-1, r16
         
         
000035 e50b          ldi r16, LOW(TASK3)
000036 9300 01a3     sts TASK3_STACK, r16
000038 e000          ldi r16, HIGH(TASK3)
000039 9300 01a2     sts TASK3_STACK-1, r16
         
         
         
00003b 9478          sei
00003c c000          rjmp TASK1
         
         
         
          TASK1:
00003d ef0f          ldi r16,0xff;
00003e bb07          out ddrb,r16
              always:
00003f ea0a          	ldi r16,0xaa
000040 bb08          	out portb,r16                                                 ; here i an toggling port b
000041 e505          	ldi r16,0x55
000042 bb08          	out portb,r16
000043 cffb          	rjmp always
           ;  ret
         
         
          TASK2:                                                                ;here simply i am sending some data serailly
000044 e303      	ldi r16,0x33
000045 b909      	out ubrrl,r16
000046 e008         ldi r16,(1<<TXEN)
000047 b90a         out ucsrb,r16
000048 e806         ldi r16,(1<<ucsz1)|(1<<ucsz0)|(1<<ursel)
000049 bd00         out ucsrc,r16
             agin:
00004a e719         ldi r17,'y'
00004b 940e 0057    call trns
00004d e615         ldi r17,'e'
00004e 940e 0057    call trns
000050 e713         ldi r17,'s'
000051 940e 0057    call trns
000053 e210         ldi r17,' '
000054 940e 0057    call trns
000056 cff3         rjmp agin
             trns:
000057 9b5d         sbis ucsra,udre
000058 cffe         rjmp trns
000059 b91c         out udr,r17
00005a 9508          ret
         
          TASK3:
00005b ef0f          ldi r16,0xff;
00005c bb07          out ddrb,r16
              als:
00005d ef0f          	ldi r16,0xff                                                ; here i am toggling port d
00005e bb08          	out portb,r16
00005f e000          	ldi r16,0x00
000060 bb08          	out portb,r16
000061 cffb          	rjmp als
           ;  ret
         
         
         
         
         
          ISRTIMER:
000062 93ff          push r31
000063 93ef          push r30
000064 93df          push r29
000065 93cf          push r28
000066 93bf          push r27
000067 93af          push r26                                         ;i am pushing al registers beacause they are not pushed automatically when isr is called
000068 939f          push r25
000069 938f          push r24
00006a 937f          push r23
00006b 936f          push r22
00006c 935f          push r21
00006d 934f          push r20
00006e 933f          push r19
00006f 932f          push r18
000070 931f          push r17
000071 930f          push r16
000072 92ff          push r15
000073 92ef          push r14
000074 92df          push r13
000075 92cf          push r12
000076 92bf          push r11
000077 92af          push r10
000078 929f          push r9
000079 928f          push r8
00007a 927f          push r7
00007b 926f          push r6
00007c 925f          push r5
00007d 924f          push r4
00007e 923f          push r3
00007f 922f          push r2
000080 921f          push r1
000081 920f          push r0
000082 b71f          in r17, SREG
000083 931f          push r17
         
         
         ;stack pointer manupulation
000084 9100 045f     lds r16, CURRENTTASKNO
000086 e5ed          ldi r30, low(STACK_BACKUP)
000087 e0f4          ldi r31, high(STACK_BACKUP)
000088 2400          clr r0
000089 1be0        sub r30,r16
00008a 09f0          sbc r31,r0
         
00008b 1be0          sub r30,r16
00008c 09f0          sbc r31,r0
         
00008d b71e          in r17, SPH
00008e 8310          st Z, r17
00008f b71d          in r17, SPL
000090 9312          st -Z, r17
         
000091 9503          inc r16
         
000092 3003          cpi r16, TASKNO
000093 f439          brne SKIP1
000094 e5ed          ldi r30, low(STACK_BACKUP)
000095 e0f4          ldi r31, high(STACK_BACKUP)
000096 2700          clr r16
000097 9300 045f     sts CURRENTTASKNO, r16
000099 8110          ld r17, Z
00009a c003          rjmp SKIP2
          SKIP1:
00009b 9300 045f     sts CURRENTTASKNO,r16
00009d 9112          ld r17, -Z
          SKIP2:
00009e bf1e          out SPH,r17
00009f 9112          ld r17, -Z
0000a0 bf1d          out SPL,r17
         
         ;
         
         ;restore all
0000a1 911f          pop r17
0000a2 bf1f          out SREG, r17
0000a3 900f          pop r0
0000a4 901f          pop r1
0000a5 902f          pop r2
0000a6 903f          pop r3
0000a7 904f          pop r4
0000a8 905f          pop r5
0000a9 906f          pop r6
0000aa 907f          pop r7
0000ab 908f          pop r8
0000ac 909f          pop r9
0000ad 90af          pop r10
0000ae 90bf          pop r11
0000af 90cf          pop r12
0000b0 90df          pop r13
0000b1 90ef          pop r14
0000b2 90ff          pop r15
0000b3 910f          pop r16
0000b4 911f          pop r17
0000b5 912f          pop r18
0000b6 913f          pop r19
0000b7 914f          pop r20
0000b8 915f          pop r21
0000b9 916f          pop r22
0000ba 917f          pop r23
0000bb 918f          pop r24
0000bc 919f          pop r25
0000bd 91af          pop r26
0000be 91bf          pop r27
0000bf 91cf          pop r28
0000c0 91df          pop r29
0000c1 91ef          pop r30
0000c2 91ff          pop r31
0000c3 9518          reti
         
         
         
         

Assembly complete with no errors.
